
import { GoogleGenAI, Modality } from "@google/genai";
import type { ImageData } from '../types';

const PROMPT = `make a picture taken with a Polaroid camera. The photo should look like a regular photo, without a clear subject or property. The photo should have a slight blur effect and a consistent light source, such as a flash from a dark room, scattered throughout the photo. Do not change the face and make it as the same on the picture. Replace the background behind the two people with a white curtain. With the guy hugging the boy and both look at the front`;

export const generateHugImage = async (
  childImage: ImageData,
  adultImage: ImageData,
): Promise<string> => {
  if (!process.env.API_KEY) {
    throw new Error("API_KEY environment variable is not set.");
  }
  const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

  try {
    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image',
      contents: {
        parts: [
          {
            inlineData: {
              data: childImage.base64,
              mimeType: childImage.mimeType,
            },
          },
          {
            inlineData: {
              data: adultImage.base64,
              mimeType: adultImage.mimeType,
            },
          },
          {
            text: PROMPT,
          },
        ],
      },
      config: {
        responseModalities: [Modality.IMAGE],
      },
    });

    for (const part of response.candidates[0].content.parts) {
      if (part.inlineData) {
        const base64ImageBytes: string = part.inlineData.data;
        return `data:${part.inlineData.mimeType};base64,${base64ImageBytes}`;
      }
    }

    throw new Error("No image was generated by the API.");
  } catch (error) {
    console.error("Error calling Gemini API:", error);
    throw new Error("Failed to generate image.");
  }
};
